# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class ItemCategory(models.Model):
    category_name = models.CharField(db_column='Category_name', max_length=100)  # Field name made lowercase.
    category_slug = models.CharField(db_column='Category_slug', unique=True, max_length=50, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Item_category'


class ItemItem(models.Model):
    item_name = models.CharField(db_column='Item_name', max_length=100)  # Field name made lowercase.
    item_description = models.TextField(db_column='Item_description')  # Field name made lowercase.
    item_price = models.DecimalField(db_column='Item_price', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    item_quantity = models.IntegerField(db_column='Item_quantity')  # Field name made lowercase.
    item_published = models.BooleanField(db_column='Item_published')  # Field name made lowercase.
    item_createdat = models.DateTimeField(db_column='Item_createdat')  # Field name made lowercase.
    item_slug = models.CharField(db_column='Item_slug', unique=True, max_length=50, blank=True, null=True)  # Field name made lowercase.
    item_category = models.ForeignKey(ItemCategory, models.DO_NOTHING, db_column='Item_category_id', blank=True, null=True)  # Field name made lowercase.
    item_img = models.CharField(db_column='Item_img', max_length=100, blank=True, null=True)  # Field name made lowercase.
    item_owner = models.ForeignKey('AuthUser', models.DO_NOTHING, db_column='Item_owner_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Item_item'


class MarketTransaction(models.Model):
    transaction_type = models.CharField(max_length=10)
    amount = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    created_at = models.DateTimeField()
    from_approve = models.BooleanField()
    to_approve = models.BooleanField()
    admin_approve = models.BooleanField()
    user_from = models.ForeignKey('AuthUser', models.DO_NOTHING)
    user_to = models.ForeignKey('AuthUser', models.DO_NOTHING, related_name='markettransaction_user_to_set')
    transaction_status = models.CharField(max_length=10)
    items = models.ForeignKey(ItemItem, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Market_transaction'


class AccountsProfile(models.Model):
    slug = models.CharField(max_length=50, blank=True, null=True)
    bio = models.TextField()
    country = models.CharField(max_length=2)
    address = models.CharField(max_length=100)
    birth_date = models.DateField(blank=True, null=True)
    joindate = models.DateTimeField()
    user = models.OneToOneField('AuthUser', models.DO_NOTHING)
    balance = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    img = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'accounts_profile'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'